#!/usr/bin/env python3
"""
Setup script to configure Claude MCP (Model Context Protocol) connection
"""

import os
import sys
import subprocess
from pathlib import Path

def check_claude_desktop():
    """Check if Claude Desktop is running and get connection details"""
    
    print("🔍 Checking for Claude Desktop...")
    
    # Check if Claude Desktop is running
    try:
        result = subprocess.run(['pgrep', '-f', 'Claude'], capture_output=True, text=True)
        if result.returncode == 0:
            print("✅ Claude Desktop appears to be running")
        else:
            print("⚠️  Claude Desktop doesn't appear to be running")
            print("   Please start Claude Desktop first")
    except:
        print("⚠️  Could not check if Claude Desktop is running")

def setup_mcp_environment():
    """Setup MCP environment variables"""
    
    print("\n🚀 Setting up Claude MCP Connection")
    print("=" * 45)
    
    print("\nTo connect to Claude Desktop via MCP, you need:")
    print("1. Claude Desktop running")
    print("2. MCP connection details from Claude Desktop")
    
    print("\n📋 Getting MCP Connection Details...")
    print("In Claude Desktop:")
    print("1. Go to Settings/Preferences")
    print("2. Look for 'Developer' or 'MCP' or 'API' section")
    print("3. Find the connection details")
    
    # Get connection details from user
    print("\n" + "="*50)
    print("Enter your MCP connection details:")
    
    base_url = input("📡 MCP Base URL (e.g., http://localhost:3000): ").strip()
    if not base_url:
        print("❌ Base URL is required!")
        sys.exit(1)
    
    auth_token = input("🔑 MCP Auth Token: ").strip()
    if not auth_token:
        print("❌ Auth token is required!")
        sys.exit(1)
    
    # Prepare environment variables
    env_vars = [
        "# Claude MCP Connection Configuration",
        "# Generated by setup_mcp_connection.py",
        f"ANTHROPIC_BASE_URL={base_url}",
        f"ANTHROPIC_AUTH_TOKEN={auth_token}",
        "",
        "# Alternative variable names for compatibility",
        f"GLM_URL={base_url}",
        f"GLM_API_TOKEN={auth_token}",
        f"CLAUDE_MCP_URL={base_url}",
        f"CLAUDE_MCP_TOKEN={auth_token}",
        ""
    ]
    
    # Write to .env file
    env_file = Path(".env")
    try:
        with open(env_file, "w") as f:
            f.write("\n".join(env_vars))
        
        print(f"✅ Environment variables written to {env_file}")
        
        # Also set in current environment for immediate use
        os.environ["ANTHROPIC_BASE_URL"] = base_url
        os.environ["ANTHROPIC_AUTH_TOKEN"] = auth_token
        os.environ["GLM_URL"] = base_url
        os.environ["GLM_API_TOKEN"] = auth_token
        
        print("✅ Environment variables set for current session")
        
    except Exception as e:
        print(f"❌ Error writing .env file: {e}")
        sys.exit(1)
    
    # Test the connection
    print("\n🧪 Testing MCP connection...")
    
    try:
        from claude_mcp_client import ClaudeMCPClient
        
        client = ClaudeMCPClient()
        
        # Show connection info
        info = client.get_connection_info()
        print(f"📋 Connection Info:")
        for key, value in info.items():
            print(f"   {key}: {value}")
        
        # Test message
        response = client.send_message("Hello! Please respond with 'MCP connection successful!'", max_tokens=50)
        
        print("✅ MCP connection successful!")
        print(f"Response: {response['content'][0]['text']}")
        
    except Exception as e:
        print(f"❌ Error testing MCP connection: {e}")
        print("\nTroubleshooting:")
        print("1. Make sure Claude Desktop is running")
        print("2. Check your MCP connection details")
        print("3. Verify the base URL is accessible")
        sys.exit(1)
    
    print("\n🎉 MCP setup complete!")
    print("\nNext steps:")
    print("1. Your .env file has been created with MCP connection details")
    print("2. You can now run any of the trading scripts")
    print("3. The system will use Claude via MCP instead of direct API")
    
    print("\nExample usage:")
    print("python test_enhanced_strategy_architect.py")
    print("python demo_enhanced_strategy_architect.py")

def auto_detect_mcp():
    """Try to auto-detect MCP connection details"""
    
    print("🔍 Attempting to auto-detect MCP connection...")
    
    # Common MCP ports and URLs
    common_urls = [
        "http://localhost:3000",
        "http://localhost:8000",
        "http://localhost:5000",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8000",
        "http://127.0.0.1:5000"
    ]
    
    for url in common_urls:
        try:
            import requests
            response = requests.get(f"{url}/health", timeout=2)
            if response.status_code == 200:
                print(f"✅ Found potential MCP server at: {url}")
                return url
        except:
            continue
    
    print("❌ Could not auto-detect MCP connection")
    return None

def check_current_setup():
    """Check current MCP setup"""
    
    print("🔍 Checking current MCP setup...")
    
    # Check for environment variables
    vars_to_check = [
        "ANTHROPIC_BASE_URL",
        "ANTHROPIC_AUTH_TOKEN", 
        "GLM_URL",
        "GLM_API_TOKEN"
    ]
    
    found_vars = {}
    for var in vars_to_check:
        value = os.getenv(var)
        if value:
            found_vars[var] = f"{value[:20]}..." if len(value) > 20 else value
    
    if found_vars:
        print("✅ Found MCP environment variables:")
        for var, value in found_vars.items():
            print(f"   {var}: {value}")
    else:
        print("❌ No MCP environment variables found")
    
    # Check for .env file
    env_file = Path(".env")
    if env_file.exists():
        print(f"✅ .env file exists at {env_file}")
    else:
        print("❌ .env file not found")
    
    # Test connection if variables are set
    if found_vars:
        print("\n🧪 Testing current MCP connection...")
        try:
            from claude_mcp_client import ClaudeMCPClient
            client = ClaudeMCPClient()
            info = client.get_connection_info()
            print("✅ MCP client can be initialized")
            print(f"Connection details: {info}")
        except Exception as e:
            print(f"❌ MCP connection test failed: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "check":
            check_current_setup()
        elif sys.argv[1] == "detect":
            url = auto_detect_mcp()
            if url:
                print(f"Detected MCP server at: {url}")
            else:
                print("No MCP server detected")
    else:
        check_claude_desktop()
        setup_mcp_environment()
